#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.9 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 67 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
25 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
47 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1           0 356 0 4 3 85
(4
 #";; The first three lines of this file were inserted by DrRacket. They"
 #" record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(5
 #";; about the language level of this file in a form that our tools can"
 #" easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 86
(6
 #"#reader(lib \"htdp-beginner-abbr-reader.ss\" \"lang\")((modname |HtDP"
 #" Ex 60|) (read-case-s"
) 0 0 4 3 257
(7
 #"ensitive #t) (teachpacks ((lib \"image.rkt\" \"teachpack\" \"2htdp\")"
 #" (lib \"universe.rkt\" \"teachpack\" \"2htdp\"))) (htdp-settings #(#t"
 #" constructor repeating-decimal #f #t none #f ((lib \"image.rkt\" \"te"
 #"achpack\" \"2htdp\") (lib \"universe.rkt\" \"teachpack\" \"2htdp\")) "
 #"#f)))"
) 0 0 4 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 3 111
(8
 #"Exercise 60. An alternative data representation for a traffic light p"
 #"rogram may use numbers instead of strings:"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"    ; An N-TrafficLight is one of:"
0 0 17 29 1 #"\n"
0 0 17 3 54
#"    ; \342\200\223 0 interpretation the traffic light shows red"
0 0 17 29 1 #"\n"
0 0 17 3 56
#"    ; \342\200\223 1 interpretation the traffic light shows green"
0 0 17 29 1 #"\n"
0 0 17 3 57
#"    ; \342\200\223 2 interpretation the traffic light shows yellow"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"It greatly simplifies the de"
0 0 17 3 20 #"finition of tl-next:"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"    ; N-TrafficLight -> N-TrafficLight"
0 0 17 29 1 #"\n"
0 0 17 3 51 #"    ; yields the next state, given current state cs"
0 0 17 29 1 #"\n"
0 0 17 3 53 #"    (define (tl-next-numeric cs) (modulo (+ cs 1) 3))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 50
#"Reformulate tl-next\342\200\231s tests for tl-next-numeric."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 124
(9
 #"Does the tl-next function convey its intention more clearly than the "
 #"tl-next-numeric function? If so, why? If not, why not? "
) 0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 34 #"; N-TrafficLight -> N-TrafficLight"
0 0 25 29 1 #"\n"
0 0 17 3 47 #"; yields the next state, given current state cs"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 15 #"tl-next-numeric"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 15 #"tl-next-numeric"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #") "
0 0 22 3 1 #"2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 15 #"tl-next-numeric"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"tl-next-numeric"
0 0 25 3 1 #" "
0 0 14 3 2 #"cs"
0 0 25 3 3 #") ("
0 0 14 3 6 #"modulo"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 2 #"cs"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #") "
0 0 22 3 1 #"3"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 23 #"; TrafficLight -> Image"
0 0 25 29 1 #"\n"
0 0 17 3 42 #"; renders the current state cs as an image"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 1 #"("
0 0 14 3 9 #"tl-render"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 6           4 22 1427
(10
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 90 0) #(struct:poi"
 #"nt 90 30) #(struct:point 0 30)) #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:translate 10 10 #(struct:translate 5 5 #(struct:ellipse 1"
 #"0 10 0 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(struct:"
 #"point 0 0) #(struct:point 90 0) #(struct:point 90 30) #(struct:point "
 #"0 30)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 40 "
 #"10 #(struct:translate 5 5 #(struct:ellipse 10 10 0 outline \"yellow\""
 #"))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struc"
 #"t:point 90 0) #(struct:point 90 30) #(struct:point 0 30)) #(struct:tr"
 #"anslate 0 0 #(struct:overlay #(struct:translate 70 10 #(struct:transl"
 #"ate 5 5 #(struct:ellipse 10 10 0 outline \"green\"))) #(struct:transl"
 #"ate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 90 0) #(str"
 #"uct:point 90 30) #(struct:point 0 30)) #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 90 "
 #"0 0 0) #(struct:pulled-point 0 0 90 30 0 0) #(struct:pulled-point 0 0"
 #" 0 30 0 0)) outline #(struct:pen \"black\" 2 solid round round)))) #("
 #"struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struc"
 #"t:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 90 0 0 0) #(str"
 #"uct:pulled-point 0 0 90 30 0 0) #(struct:pulled-point 0 0 0 30 0 0)) "
 #"255 \"white\")))))))))))))))))) #(struct:bb 90 30 30) #f)"
) 0 0 25 3 2 #" )"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 1 #"("
0 0 14 3 9 #"tl-render"
0 0 25 3 2 #"  "
0 0 22 3 1 #"1"
0 0 25 3 2 #") "
0 6           4 22 1427
(11
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 90 0) #(struct:poi"
 #"nt 90 30) #(struct:point 0 30)) #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:translate 10 10 #(struct:translate 5 5 #(struct:ellipse 1"
 #"0 10 0 outline \"red\"))) #(struct:translate 0 0 #(struct:crop (#(str"
 #"uct:point 0 0) #(struct:point 90 0) #(struct:point 90 30) #(struct:po"
 #"int 0 30)) #(struct:translate 0 0 #(struct:overlay #(struct:translate"
 #" 40 10 #(struct:translate 5 5 #(struct:ellipse 10 10 0 255 \"yellow\""
 #"))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struc"
 #"t:point 90 0) #(struct:point 90 30) #(struct:point 0 30)) #(struct:tr"
 #"anslate 0 0 #(struct:overlay #(struct:translate 70 10 #(struct:transl"
 #"ate 5 5 #(struct:ellipse 10 10 0 outline \"green\"))) #(struct:transl"
 #"ate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 90 0) #(str"
 #"uct:point 90 30) #(struct:point 0 30)) #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 90 "
 #"0 0 0) #(struct:pulled-point 0 0 90 30 0 0) #(struct:pulled-point 0 0"
 #" 0 30 0 0)) outline #(struct:pen \"black\" 2 solid round round)))) #("
 #"struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struc"
 #"t:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 90 0 0 0) #(str"
 #"uct:pulled-point 0 0 90 30 0 0) #(struct:pulled-point 0 0 0 30 0 0)) "
 #"255 \"white\")))))))))))))))))) #(struct:bb 90 30 30) #f)"
) 0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 9 #"tl-render"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 6           4 22 1427
(12
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 90 0) #(struct:poi"
 #"nt 90 30) #(struct:point 0 30)) #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:translate 10 10 #(struct:translate 5 5 #(struct:ellipse 1"
 #"0 10 0 outline \"red\"))) #(struct:translate 0 0 #(struct:crop (#(str"
 #"uct:point 0 0) #(struct:point 90 0) #(struct:point 90 30) #(struct:po"
 #"int 0 30)) #(struct:translate 0 0 #(struct:overlay #(struct:translate"
 #" 40 10 #(struct:translate 5 5 #(struct:ellipse 10 10 0 outline \"yell"
 #"ow\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(s"
 #"truct:point 90 0) #(struct:point 90 30) #(struct:point 0 30)) #(struc"
 #"t:translate 0 0 #(struct:overlay #(struct:translate 70 10 #(struct:tr"
 #"anslate 5 5 #(struct:ellipse 10 10 0 255 \"green\"))) #(struct:transl"
 #"ate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 90 0) #(str"
 #"uct:point 90 30) #(struct:point 0 30)) #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 90 "
 #"0 0 0) #(struct:pulled-point 0 0 90 30 0 0) #(struct:pulled-point 0 0"
 #" 0 30 0 0)) outline #(struct:pen \"black\" 2 solid round round)))) #("
 #"struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struc"
 #"t:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 90 0 0 0) #(str"
 #"uct:pulled-point 0 0 90 30 0 0) #(struct:pulled-point 0 0 0 30 0 0)) "
 #"255 \"white\")))))))))))))))))) #(struct:bb 90 30 30) #f)"
) 0 0 25 3 2 #") "
0 0 17 3 42 #";I use a different numbering from the book"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"tl-render"
0 0 25 3 1 #" "
0 0 14 3 13 #"current-state"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 13 #"current-state"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 11 #"place-image"
0 0 25 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 25 3 2 #") "
0 0 22 3 2 #"15"
0 0 25 3 1 #" "
0 0 22 3 2 #"15"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 11 #"place-image"
0 0 25 3 1 #"("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 25 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 25 3 2 #") "
0 0 22 3 2 #"45"
0 0 25 3 1 #" "
0 0 22 3 2 #"15"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 11 #"place-image"
0 0 25 3 1 #"("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 25 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 25 3 2 #") "
0 0 22 3 2 #"75"
0 0 25 3 1 #" "
0 0 22 3 2 #"15"
0 0 25 29 1 #"\n"
0 0 25 3 28 #"                           ("
0 0 14 3 11 #"empty-scene"
0 0 25 3 1 #" "
0 0 22 3 2 #"90"
0 0 25 3 1 #" "
0 0 22 3 2 #"30"
0 0 25 3 5 #"))))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 13 #"current-state"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 11 #"place-image"
0 0 25 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 25 3 2 #") "
0 0 22 3 2 #"15"
0 0 25 3 1 #" "
0 0 22 3 2 #"15"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 11 #"place-image"
0 0 25 3 1 #"("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 25 3 2 #") "
0 0 22 3 2 #"45"
0 0 25 3 1 #" "
0 0 22 3 2 #"15"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 11 #"place-image"
0 0 25 3 1 #"("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 25 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 25 3 2 #") "
0 0 22 3 2 #"75"
0 0 25 3 1 #" "
0 0 22 3 2 #"15"
0 0 25 29 1 #"\n"
0 0 25 3 28 #"                           ("
0 0 14 3 11 #"empty-scene"
0 0 25 3 1 #" "
0 0 22 3 2 #"90"
0 0 25 3 1 #" "
0 0 22 3 2 #"30"
0 0 25 3 5 #"))))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 13 #"current-state"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 11 #"place-image"
0 0 25 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 25 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 25 3 2 #") "
0 0 22 3 2 #"15"
0 0 25 3 1 #" "
0 0 22 3 2 #"15"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 11 #"place-image"
0 0 25 3 1 #"("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 25 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 25 3 2 #") "
0 0 22 3 2 #"45"
0 0 25 3 1 #" "
0 0 22 3 2 #"15"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 11 #"place-image"
0 0 25 3 1 #"("
0 0 14 3 6 #"circle"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 25 3 2 #") "
0 0 22 3 2 #"75"
0 0 25 3 1 #" "
0 0 22 3 2 #"15"
0 0 25 29 1 #"\n"
0 0 25 3 28 #"                           ("
0 0 14 3 11 #"empty-scene"
0 0 25 3 1 #" "
0 0 22 3 2 #"90"
0 0 25 3 1 #" "
0 0 22 3 2 #"30"
0 0 25 3 8 #"))))])) "
0 0 17 3 84
(13
 #";not very clean, and I'm not super happy about this, but no choice as"
 #" a first draft."
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 30 #"; TrafficLight -> TrafficLight"
0 0 25 29 1 #"\n"
0 0 17 3 48 #"; simulates a clock-based American traffic light"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 24 #"traffic-light-simulation"
0 0 25 3 1 #" "
0 0 14 3 13 #"initial-state"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 8 #"big-bang"
0 0 25 3 1 #" "
0 0 14 3 13 #"initial-state"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 14 3 7 #"to-draw"
0 0 25 3 1 #" "
0 0 14 3 9 #"tl-render"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 14 3 7 #"on-tick"
0 0 25 3 1 #" "
0 0 14 3 15 #"tl-next-numeric"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #"]))"
0           0
